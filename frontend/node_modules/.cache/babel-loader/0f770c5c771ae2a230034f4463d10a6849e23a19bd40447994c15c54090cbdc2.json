{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-2a57d0e2\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"calendar-month\"\n};\nconst _hoisted_2 = {\n  class: \"calendar-month-header\"\n};\nconst _hoisted_3 = {\n  class: \"days-grid\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_CalendarDateIndicator = _resolveComponent(\"CalendarDateIndicator\");\n  const _component_CalendarDateSelector = _resolveComponent(\"CalendarDateSelector\");\n  const _component_CalendarWeekdays = _resolveComponent(\"CalendarWeekdays\");\n  const _component_CalendarMonthDayItem = _resolveComponent(\"CalendarMonthDayItem\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode(_component_CalendarDateIndicator, {\n    \"selected-date\": $data.selectedDate,\n    class: \"calendar-month-header-selected-month\"\n  }, null, 8 /* PROPS */, [\"selected-date\"]), _createVNode(_component_CalendarDateSelector, {\n    \"current-date\": $options.today,\n    \"selected-date\": $data.selectedDate,\n    onDateSelected: $options.selectDate\n  }, null, 8 /* PROPS */, [\"current-date\", \"selected-date\", \"onDateSelected\"])]), _createVNode(_component_CalendarWeekdays), _createElementVNode(\"ol\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($options.days, day => {\n    return _openBlock(), _createBlock(_component_CalendarMonthDayItem, {\n      onDateChange: $options.handleDayChange,\n      key: day.date,\n      day: day,\n      \"is-today\": day.date === $options.today\n    }, null, 8 /* PROPS */, [\"onDateChange\", \"day\", \"is-today\"]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","_component_CalendarDateIndicator","$data","selectedDate","_component_CalendarDateSelector","$options","today","onDateSelected","selectDate","_component_CalendarWeekdays","_hoisted_3","_Fragment","_renderList","days","day","_createBlock","_component_CalendarMonthDayItem","onDateChange","handleDayChange","key","date"],"sources":["/app/src/components/CalendarMonth.vue"],"sourcesContent":["<template>\n    <div class=\"calendar-month\">\n        <div class=\"calendar-month-header\">\n            <CalendarDateIndicator\n                :selected-date=\"selectedDate\"\n                class=\"calendar-month-header-selected-month\" />\n\n            <CalendarDateSelector\n                :current-date=\"today\"\n                :selected-date=\"selectedDate\"\n                @dateSelected=\"selectDate\" />\n        </div>\n\n        <CalendarWeekdays />\n\n        <ol class=\"days-grid\">\n            <CalendarMonthDayItem\n                @date-change=\"handleDayChange\"\n                v-for=\"day in days\"\n                :key=\"day.date\"\n                :day=\"day\"\n                :is-today=\"day.date === today\" />\n        </ol>\n    </div>\n</template>\n\n<script>\nimport dayjs from \"dayjs\";\nimport weekday from \"dayjs/plugin/weekday\";\nimport weekOfYear from \"dayjs/plugin/weekOfYear\";\nimport CalendarMonthDayItem from \"./CalendarMonthDayItem\";\nimport CalendarDateIndicator from \"./CalendarDateIndicator\";\nimport CalendarDateSelector from \"./CalendarDateSelector\";\nimport CalendarWeekdays from \"./CalendarWeekdays\";\n\ndayjs.extend(weekday);\ndayjs.extend(weekOfYear);\n\nexport default {\n    name: \"CalendarMonth\",\n\n    components: {\n        CalendarMonthDayItem,\n        CalendarDateIndicator,\n        CalendarDateSelector,\n        CalendarWeekdays,\n    },\n\n    data() {\n        return {\n            selectedDate: dayjs(),\n            selectedWeek: 1,\n        };\n    },\n\n    computed: {\n        days() {\n            return [\n                ...this.previousMonthDays,\n                ...this.currentMonthDays,\n                ...this.nextMonthDays,\n            ];\n        },\n\n        today() {\n            return dayjs().format(\"YYYY-MM-DD\");\n        },\n\n        month() {\n            return Number(this.selectedDate.format(\"M\"));\n        },\n\n        year() {\n            return Number(this.selectedDate.format(\"YYYY\"));\n        },\n\n        numberOfDaysInMonth() {\n            return dayjs(this.selectedDate).daysInMonth();\n        },\n\n        currentMonthDays() {\n            return [...Array(this.numberOfDaysInMonth)].map((day, index) => {\n                return {\n                    date: dayjs(\n                        `${this.year}-${this.month}-${index + 1}`\n                    ).format(\"YYYY-MM-DD\"),\n                    isCurrentMonth: true,\n                };\n            });\n        },\n\n        previousMonthDays() {\n            const firstDayOfTheMonthWeekday = this.getWeekday(\n                this.currentMonthDays[0].date\n            );\n            const previousMonth = dayjs(\n                `${this.year}-${this.month}-01`\n            ).subtract(1, \"month\");\n\n            // Cover first day of the month being sunday (firstDayOfTheMonthWeekday === 0)\n            const visibleNumberOfDaysFromPreviousMonth =\n                firstDayOfTheMonthWeekday ? firstDayOfTheMonthWeekday - 1 : 6;\n\n            const previousMonthLastMondayDayOfMonth = dayjs(\n                this.currentMonthDays[0].date\n            )\n                .subtract(visibleNumberOfDaysFromPreviousMonth, \"day\")\n                .date();\n\n            return [...Array(visibleNumberOfDaysFromPreviousMonth)].map(\n                (day, index) => {\n                    return {\n                        date: dayjs(\n                            `${previousMonth.year()}-${\n                                previousMonth.month() + 1\n                            }-${previousMonthLastMondayDayOfMonth + index}`\n                        ).format(\"YYYY-MM-DD\"),\n                        isCurrentMonth: false,\n                    };\n                }\n            );\n        },\n\n        nextMonthDays() {\n            const lastDayOfTheMonthWeekday = this.getWeekday(\n                `${this.year}-${this.month}-${this.currentMonthDays.length}`\n            );\n\n            const nextMonth = dayjs(`${this.year}-${this.month}-01`).add(\n                1,\n                \"month\"\n            );\n\n            const visibleNumberOfDaysFromNextMonth = lastDayOfTheMonthWeekday\n                ? 7 - lastDayOfTheMonthWeekday\n                : lastDayOfTheMonthWeekday;\n\n            return [...Array(visibleNumberOfDaysFromNextMonth)].map(\n                (day, index) => {\n                    return {\n                        date: dayjs(\n                            `${nextMonth.year()}-${nextMonth.month() + 1}-${\n                                index + 1\n                            }`\n                        ).format(\"YYYY-MM-DD\"),\n                        isCurrentMonth: false,\n                    };\n                }\n            );\n        },\n    },\n\n    methods: {\n        getWeekday(date) {\n            return dayjs(date).weekday();\n        },\n        selectDate(newSelectedDate) {\n            this.selectedDate = newSelectedDate;\n        },\n        handleDayChange(date) {\n            this.$emit(\"calendar-date-change\", date);\n        },\n    },\n};\n</script>\n\n<style scoped>\n.calendar-month {\n    position: relative;\n    background-color: var(--grey-200);\n    border: ridge 0.125rem black;\n    min-width: 18.75rem;\n    max-width: 25rem;\n    height: fit-content;\n    margin-top: 1.5rem;\n}\n\n.day-of-week {\n    color: var(--grey-800);\n    font-size: 1.125rem;\n    background-color: #fff;\n    padding-bottom: 0.3125rem;\n    padding-top: 0.625rem;\n}\n\n.day-of-week,\n.days-grid {\n    display: grid;\n    grid-template-columns: repeat(7, 1fr);\n}\n\n.day-of-week > * {\n    text-align: right;\n    padding-right: 5px;\n}\n\n.days-grid {\n    height: auto;\n    position: relative;\n    grid-column-gap: var(--grid-gap);\n    grid-row-gap: var(--grid-gap);\n    border-top: solid 1px black;\n}\n@media (max-width: 1500px) {\n    .calendar-month {\n        margin: 0 auto;\n    }\n}\n</style>\n"],"mappings":";;;EACSA,KAAK,EAAC;AAAgB;;EAClBA,KAAK,EAAC;AAAuB;;EAa9BA,KAAK,EAAC;AAAW;;;;;;uBAdzBC,mBAAA,CAsBM,OAtBNC,UAsBM,GArBFC,mBAAA,CASM,OATNC,UASM,GARFC,YAAA,CAEmDC,gCAAA;IAD9C,eAAa,EAAEC,KAAA,CAAAC,YAAY;IAC5BR,KAAK,EAAC;8CAEVK,YAAA,CAGiCI,+BAAA;IAF5B,cAAY,EAAEC,QAAA,CAAAC,KAAK;IACnB,eAAa,EAAEJ,KAAA,CAAAC,YAAY;IAC3BI,cAAY,EAAEF,QAAA,CAAAG;kFAGvBR,YAAA,CAAoBS,2BAAA,GAEpBX,mBAAA,CAOK,MAPLY,UAOK,I,kBANDd,mBAAA,CAKqCe,SAAA,QArBjDC,WAAA,CAkB8BP,QAAA,CAAAQ,IAAI,EAAXC,GAAG;yBAFdC,YAAA,CAKqCC,+BAAA;MAJhCC,YAAW,EAAEZ,QAAA,CAAAa,eAAe;MAE5BC,GAAG,EAAEL,GAAG,CAACM,IAAI;MACbN,GAAG,EAAEA,GAAG;MACR,UAAQ,EAAEA,GAAG,CAACM,IAAI,KAAKf,QAAA,CAAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}