{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-dbed7180\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"meal-selection-container\"\n};\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"h3\", null, \"NAROČENA PREHRANA\", -1));\nconst _hoisted_3 = {\n  class: \"days\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_DayColumn = _resolveComponent(\"DayColumn\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createElementVNode(\"div\", _hoisted_3, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.weekDates, day => {\n    return _openBlock(), _createBlock(_component_DayColumn, {\n      key: day,\n      dayName: day\n    }, null, 8, [\"dayName\"]);\n  }), 128))])]);\n}","map":{"version":3,"names":["class","_createElementVNode","_createElementBlock","_hoisted_1","_hoisted_2","_hoisted_3","_Fragment","_renderList","$data","weekDates","day","_createBlock","_component_DayColumn","key","dayName"],"sources":["/Users/tom/malice/frontend/src/components/MealSelection.vue"],"sourcesContent":["<template>\n    <div class=\"meal-selection-container\">\n        <h3>NAROČENA PREHRANA</h3>\n        <div class=\"days\">\n            <DayColumn v-for=\"day in weekDates\" :key=\"day\" :dayName=\"day\" />\n        </div>\n    </div>\n</template>\n\n<script>\nimport DayColumn from \"./DayColumn.vue\";\nimport isoWeek from \"dayjs/plugin/isoWeek\";\nconst dayjs = require(\"dayjs\");\nimport \"dayjs/locale/sl\";\nimport advancedFormat from \"dayjs/plugin/advancedFormat\"; // For custom formatting\ndayjs.extend(advancedFormat);\ndayjs.extend(isoWeek);\nimport customParseFormat from \"dayjs/plugin/customParseFormat\";\ndayjs.extend(customParseFormat);\n\nexport default {\n    name: \"MealSelection\",\n    components: {\n        DayColumn,\n    },\n    props: {\n        selectedDate: {\n            type: Object,\n            required: true,\n            default: function () {\n                return {\n                    year: dayjs().year(),\n                    week: dayjs().isoWeek(),\n                };\n            },\n        },\n    },\n    data() {\n        return {\n            weekDays: [\n                { name: \"pon\" },\n                { name: \"tor\" },\n                { name: \"sre\" },\n                { name: \"čet\" },\n                { name: \"pet\" },\n                { name: \"sob\" },\n                { name: \"ned\" },\n            ],\n            weekDates: [],\n        };\n    },\n    created() {\n        this.initializeWeekDates();\n    },\n    watch: {\n        selectedDate(newValue) {\n            if (newValue) {\n                const { year, week } = newValue;\n                const newWeekDates = this.getWeekDatesFromYearAndWeek(\n                    year,\n                    week\n                );\n                this.weekDates = newWeekDates;\n            }\n        },\n    },\n    methods: {\n        initializeWeekDates() {\n            const today = new Date();\n            const firstDayOfWeek = today.getDate() - today.getDay();\n            const startOfWeek = new Date(today.setDate(firstDayOfWeek));\n            this.weekDates.length = 0;\n            for (let i = 1; i < 8; i++) {\n                const day = new Date(startOfWeek);\n                day.setDate(startOfWeek.getDate() + i);\n                const formattedDate = day.toLocaleDateString(\"sl-SI\", {\n                    weekday: \"short\",\n                    day: \"numeric\",\n                    month: \"short\",\n                });\n                this.weekDates.push(formattedDate);\n            }\n            console.log(this.weekDates);\n        },\n        getWeekDatesFromYearAndWeek(year, weekNumber) {\n            const dates = [];\n            const firstDayOfYear = new Date(year, 0, 1);\n            const days = (weekNumber - 1) * 7 - firstDayOfYear.getDay();\n            const firstDayOfWeek = new Date(year, 0, days + 1);\n\n            for (let i = 1; i < 8; i++) {\n                const day = new Date(firstDayOfWeek);\n                day.setDate(firstDayOfWeek.getDate() + i);\n\n                const formattedDate = day.toLocaleDateString(\"sl-SI\", {\n                    weekday: \"short\",\n                    day: \"numeric\",\n                    month: \"short\",\n                });\n\n                dates.push(formattedDate);\n            }\n            return dates;\n        },\n    },\n};\n</script>\n\n<style scoped>\n.days {\n    display: flex;\n    flex: 0 0 auto;\n    gap: 8px;\n}\n.meal-selection-container {\n    display: flex;\n    flex-direction: column;\n    padding: 16px;\n    border-radius: 16px;\n}\nh3 {\n    margin: 4px 0;\n    background-color: #fbc5c5;\n    padding: 8px;\n    border-radius: 8px 8px 0px 0px;\n}\n\n@media (max-width: 1000px) {\n    .days {\n        flex-direction: column;\n    }\n}\n\n@media (max-width: 1000px) and (min-width: 400px) {\n    .meal-selection-container {\n        width: 400px;\n        margin: 0 auto;\n    }\n}\n</style>\n"],"mappings":";;;EACSA,KAAK,EAAC;AAA0B;gEACjCC,mBAAA,CAA0B,YAAtB,mBAAiB;;EAChBD,KAAK,EAAC;AAAM;;;uBAFrBE,mBAAA,CAKM,OALNC,UAKM,GAJFC,UAA0B,EAC1BH,mBAAA,CAEM,OAFNI,UAEM,I,kBADFH,mBAAA,CAAgEI,SAAA,QAJ5EC,WAAA,CAIqCC,KAAA,CAAAC,SAAS,EAAhBC,GAAG;yBAArBC,YAAA,CAAgEC,oBAAA;MAA3BC,GAAG,EAAEH,GAAG;MAAGI,OAAO,EAAEJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}