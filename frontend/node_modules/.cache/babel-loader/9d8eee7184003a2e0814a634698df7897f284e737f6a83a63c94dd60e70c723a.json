{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport DayColumn from \"./DayColumn.vue\";\nimport isoWeek from \"dayjs/plugin/isoWeek\";\nconst dayjs = require(\"dayjs\");\nimport \"dayjs/locale/sl\";\nimport advancedFormat from \"dayjs/plugin/advancedFormat\"; // For custom formatting\ndayjs.extend(advancedFormat);\ndayjs.extend(isoWeek);\nimport customParseFormat from \"dayjs/plugin/customParseFormat\";\ndayjs.extend(customParseFormat);\nexport default {\n  name: \"MealSelection\",\n  components: {\n    DayColumn\n  },\n  props: {\n    selectedDate: {\n      type: Object,\n      required: true,\n      default: function () {\n        return {\n          year: dayjs().year(),\n          week: dayjs().isoWeek()\n        };\n      }\n    }\n  },\n  data() {\n    return {\n      weekDays: [{\n        name: \"pon\"\n      }, {\n        name: \"tor\"\n      }, {\n        name: \"sre\"\n      }, {\n        name: \"čet\"\n      }, {\n        name: \"pet\"\n      }, {\n        name: \"sob\"\n      }, {\n        name: \"ned\"\n      }],\n      weekDates: []\n    };\n  },\n  created() {\n    this.initializeWeekDates();\n  },\n  watch: {\n    selectedDate(newValue) {\n      if (newValue) {\n        const {\n          year,\n          week\n        } = newValue;\n        const newWeekDates = this.getWeekDatesFromYearAndWeek(year, week);\n        this.weekDates = newWeekDates;\n      }\n    }\n  },\n  methods: {\n    initializeWeekDates() {\n      const today = new Date();\n      const firstDayOfWeek = today.getDate() - today.getDay();\n      const startOfWeek = new Date(today.setDate(firstDayOfWeek));\n      this.weekDates.length = 0;\n      for (let i = 1; i < 8; i++) {\n        const day = new Date(startOfWeek);\n        day.setDate(startOfWeek.getDate() + i);\n        const formattedDate = day.toLocaleDateString(\"sl-SI\", {\n          weekday: \"short\",\n          day: \"numeric\",\n          month: \"short\"\n        });\n        this.weekDates.push(formattedDate);\n      }\n      console.log(this.weekDates);\n    },\n    getWeekDatesFromYearAndWeek(year, weekNumber) {\n      const dates = [];\n      const firstDayOfYear = new Date(year, 0, 1);\n      const days = (weekNumber - 1) * 7 - firstDayOfYear.getDay();\n      const firstDayOfWeek = new Date(year, 0, days + 1);\n      for (let i = 1; i < 8; i++) {\n        const day = new Date(firstDayOfWeek);\n        day.setDate(firstDayOfWeek.getDate() + i);\n        const formattedDate = day.toLocaleDateString(\"sl-SI\", {\n          weekday: \"short\",\n          day: \"numeric\",\n          month: \"short\"\n        });\n        dates.push(formattedDate);\n      }\n      return dates;\n    }\n  }\n};","map":{"version":3,"names":["DayColumn","isoWeek","dayjs","require","advancedFormat","extend","customParseFormat","name","components","props","selectedDate","type","Object","required","default","year","week","data","weekDays","weekDates","created","initializeWeekDates","watch","newValue","newWeekDates","getWeekDatesFromYearAndWeek","methods","today","Date","firstDayOfWeek","getDate","getDay","startOfWeek","setDate","length","i","day","formattedDate","toLocaleDateString","weekday","month","push","console","log","weekNumber","dates","firstDayOfYear","days"],"sources":["/Users/tom/malice/frontend/src/components/MealSelection.vue"],"sourcesContent":["<template>\n    <div class=\"meal-selection-container\">\n        <h3>NAROČENA PREHRANA</h3>\n        <div class=\"days\">\n            <DayColumn v-for=\"day in weekDates\" :key=\"day\" :dayName=\"day\" />\n        </div>\n    </div>\n</template>\n\n<script>\nimport DayColumn from \"./DayColumn.vue\";\nimport isoWeek from \"dayjs/plugin/isoWeek\";\nconst dayjs = require(\"dayjs\");\nimport \"dayjs/locale/sl\";\nimport advancedFormat from \"dayjs/plugin/advancedFormat\"; // For custom formatting\ndayjs.extend(advancedFormat);\ndayjs.extend(isoWeek);\nimport customParseFormat from \"dayjs/plugin/customParseFormat\";\ndayjs.extend(customParseFormat);\n\nexport default {\n    name: \"MealSelection\",\n    components: {\n        DayColumn,\n    },\n    props: {\n        selectedDate: {\n            type: Object,\n            required: true,\n            default: function () {\n                return {\n                    year: dayjs().year(),\n                    week: dayjs().isoWeek(),\n                };\n            },\n        },\n    },\n    data() {\n        return {\n            weekDays: [\n                { name: \"pon\" },\n                { name: \"tor\" },\n                { name: \"sre\" },\n                { name: \"čet\" },\n                { name: \"pet\" },\n                { name: \"sob\" },\n                { name: \"ned\" },\n            ],\n            weekDates: [],\n        };\n    },\n    created() {\n        this.initializeWeekDates();\n    },\n    watch: {\n        selectedDate(newValue) {\n            if (newValue) {\n                const { year, week } = newValue;\n                const newWeekDates = this.getWeekDatesFromYearAndWeek(\n                    year,\n                    week\n                );\n                this.weekDates = newWeekDates;\n            }\n        },\n    },\n    methods: {\n        initializeWeekDates() {\n            const today = new Date();\n            const firstDayOfWeek = today.getDate() - today.getDay();\n            const startOfWeek = new Date(today.setDate(firstDayOfWeek));\n            this.weekDates.length = 0;\n            for (let i = 1; i < 8; i++) {\n                const day = new Date(startOfWeek);\n                day.setDate(startOfWeek.getDate() + i);\n                const formattedDate = day.toLocaleDateString(\"sl-SI\", {\n                    weekday: \"short\",\n                    day: \"numeric\",\n                    month: \"short\",\n                });\n                this.weekDates.push(formattedDate);\n            }\n            console.log(this.weekDates);\n        },\n        getWeekDatesFromYearAndWeek(year, weekNumber) {\n            const dates = [];\n            const firstDayOfYear = new Date(year, 0, 1);\n            const days = (weekNumber - 1) * 7 - firstDayOfYear.getDay();\n            const firstDayOfWeek = new Date(year, 0, days + 1);\n\n            for (let i = 1; i < 8; i++) {\n                const day = new Date(firstDayOfWeek);\n                day.setDate(firstDayOfWeek.getDate() + i);\n\n                const formattedDate = day.toLocaleDateString(\"sl-SI\", {\n                    weekday: \"short\",\n                    day: \"numeric\",\n                    month: \"short\",\n                });\n\n                dates.push(formattedDate);\n            }\n            return dates;\n        },\n    },\n};\n</script>\n\n<style scoped>\n.days {\n    display: flex;\n    flex: 0 0 auto;\n    gap: 8px;\n}\n.meal-selection-container {\n    display: flex;\n    flex-direction: column;\n    padding: 16px;\n    border-radius: 16px;\n}\nh3 {\n    margin: 4px 0;\n    background-color: #fbc5c5;\n    padding: 8px;\n    border-radius: 8px 8px 0px 0px;\n}\n\n@media (max-width: 1000px) {\n    .days {\n        flex-direction: column;\n    }\n}\n\n@media (max-width: 1000px) and (min-width: 400px) {\n    .meal-selection-container {\n        width: 400px;\n        margin: 0 auto;\n    }\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}